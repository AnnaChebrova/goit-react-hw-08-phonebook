{"version":3,"sources":["components/phonebook.module.css","routes.js","Views/HomeView.js","redux/auth/auth-operations.js","Views/RegisterView.js","Views/LoginView.js","redux/contactsSlice.js","redux/thunk.js","redux/Selectors/contacts-selectors.js","components/Contacts.js","components/ContactForm.js","components/Filter.js","Views/ContactsView.js","components/Navigation.js","redux/auth/auth-selectors.js","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublikRoute.js","App.js","redux/auth/auth-slice.js","redux/store.js","middlewares/analytics-logger.js","index.js"],"names":["module","exports","routes","styles","container","minHeight","display","alignItems","justifyContent","title","fontWeight","fontSize","textAlign","HomeView","style","ACCOUNT_BASE_URL","token","axios","defaults","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","logIn","operations","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","rejectWithValue","get","form","width","label","flexDirection","marginBottom","RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","handleChange","target","value","onSubmit","e","preventDefault","authOperations","autoComplete","type","onChange","LoginView","contactsSlice","createSlice","initialState","items","query","error","reducers","getContactsSuccess","action","payload","getContactsFailure","addContactSuccess","some","c","push","addContactFailure","deleteContactSuccess","filter","id","updateQuery","toLowerCase","actions","getContactsSelector","contacts","getContactsErrorSelector","getFilteredContactsSelector","createSelector","item","includes","Contacts","useSelector","useEffect","then","response","catch","toString","deleteContact","delete","deleteContactThunk","className","list","map","contact","number","onClick","btnList","ContactForm","setNumber","handleInputChange","currentTarget","event","newContact","shortid","generate","pattern","inputName","required","inputTel","btnForm","Filter","filteredItems","setQuery","useCallback","handleSearch","inputFilter","btnFilter","ContactsView","link","textDecoration","padding","color","activeLink","Navigation","to","exact","activeStyle","authSelectors","getIsLoggedIn","isLoggedIn","getUserName","user","avatar","marginRight","UserMenu","AuthNav","header","borderBottom","AppBar","PrivateRoute","children","redirectTo","routeProps","PublicRoute","restricted","shouldRedirect","App","fallback","path","component","authSlice","extraReducers","fulfilled","authPersistConfig","key","storage","whitelist","enhancer","applyMiddleware","thunk","store","next","console","group","info","groupEnd","configureStore","reducer","contactsReducer","persistReducer","authReducer","enhancers","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.164f974d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"phonebook_container__3IYyu\",\"form\":\"phonebook_form__YrK7j\",\"inputName\":\"phonebook_inputName__ck9vQ\",\"inputTel\":\"phonebook_inputTel__2mT5k\",\"btnForm\":\"phonebook_btnForm__ew3Ql\",\"error\":\"phonebook_error__1aDRH\",\"list\":\"phonebook_list__1ZApi\",\"contact\":\"phonebook_contact__2uld3\",\"btnList\":\"phonebook_btnList__2HFiY\",\"inputFilter\":\"phonebook_inputFilter__-Kmb0\",\"btnFilter\":\"phonebook_btnFilter__ixVCo\",\"btnLogout\":\"phonebook_btnLogout__3spRX\",\"btnLogoutDisabled\":\"phonebook_btnLogoutDisabled__1LyHN\"};","const routes = {\r\n    home: \"/\",\r\n    register: \"/register\",\r\n    login: \"/login\",\r\n    contacts: \"/contacts\",\r\n};\r\n\r\nexport {routes};","import React from 'react';\r\n\r\nconst styles = {\r\n  container: {\r\n    minHeight: 'calc(100vh - 50px)',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontWeight: 500,\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n};\r\n\r\nconst HomeView = () => (\r\n  <div style={styles.container}>\r\n    <h1 style={styles.title}>\r\n      Добро пожаловать в приложение \"Телефонная книга\"{' '}\r\n    </h1>\r\n  </div>\r\n);\r\n\r\nexport default HomeView;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const ACCOUNT_BASE_URL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = createAsyncThunk(\r\n  `${ACCOUNT_BASE_URL}auth/register`,\r\n  async credentials => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${ACCOUNT_BASE_URL}/users/signup`,\r\n        credentials,\r\n      );\r\n      token.set(data.token);\r\n      return data;\r\n    } catch (error) {}\r\n  },\r\n);\r\n\r\nconst logIn = createAsyncThunk(\r\n  `${ACCOUNT_BASE_URL}auth/login`,\r\n  async credentials => {\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${ACCOUNT_BASE_URL}/users/login`,\r\n        credentials,\r\n      );\r\n      token.set(data.token);\r\n      return data;\r\n    } catch (error) {}\r\n  },\r\n);\r\n\r\nconst logOut = createAsyncThunk(`${ACCOUNT_BASE_URL}auth/logout`, async () => {\r\n  try {\r\n    await axios.post(`${ACCOUNT_BASE_URL}/users/logout`);\r\n    token.unset();\r\n  } catch (error) {}\r\n});\r\n\r\nconst fetchCurrentUser = createAsyncThunk(\r\n  `${ACCOUNT_BASE_URL}auth/refresh`,\r\n  async (_, thunkAPI) => {\r\n    const state = thunkAPI.getState();\r\n    const persistedToken = state.auth.token;\r\n\r\n    if (persistedToken === null) {\r\n      return thunkAPI.rejectWithValue();\r\n    }\r\n\r\n    token.set(persistedToken);\r\n    try {\r\n      const { data } = await axios.get(`${ACCOUNT_BASE_URL}/users/current`);\r\n      return data;\r\n    } catch (error) {}\r\n  },\r\n);\r\n\r\nconst operations = {\r\n  register,\r\n  logOut,\r\n  logIn,\r\n  fetchCurrentUser,\r\n};\r\nexport default operations;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations  from '../redux/auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nexport default function RegisterView() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.register({ name, email, password }));\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница регистрации</h1>\r\n\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <label style={styles.label}>\r\n          Имя\r\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Зарегистрироваться</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n// import React, { useCallback, useState } from 'react';\r\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\r\n// import { Link } from 'react-router-dom';\r\n// import { routes } from '../routes';\r\n// import { useDispatch } from 'react-redux';\r\n// import { register } from '../login/thunkLogin';\r\n// import Button from '@material-ui/core/Button';\r\n// import TextField from '@material-ui/core/TextField';\r\n\r\n// import authOperations from '../redux/auth/auth-operations';\r\n\r\n// const INITIAL_VALUES = {\r\n//   name: '',\r\n//   email: '',\r\n//   password: '',\r\n//   confirmPassword: '',\r\n// };\r\n\r\n// const RegisterView = () => {\r\n//   const dispatch = useDispatch();\r\n//   const validate = useCallback(values => {\r\n//     const errors = {};\r\n\r\n//     if (!values.email) {\r\n//       errors.email = 'Required';\r\n//     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\r\n//       errors.email = 'Invalid email address';\r\n//     }\r\n\r\n//     return errors;\r\n//   }, []);\r\n\r\n//   const handleSubmit = useCallback(\r\n//     (values, { setSubmitting }) => {\r\n//       const { name, email, password } = values;\r\n//       dispatch(authOperations.register({ name, email, password }));\r\n\r\n//       setSubmitting(false);\r\n//     },\r\n//     [dispatch],\r\n//   );\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Registration form</h1>\r\n//       <Formik\r\n//         initialValues={INITIAL_VALUES}\r\n//         validate={validate}\r\n//         onSubmit={handleSubmit}\r\n//       >\r\n//         {({\r\n//           values,\r\n//           errors,\r\n//           touched,\r\n//           handleChange,\r\n//           handleBlur,\r\n//           handleSubmit,\r\n//           isSubmitting,\r\n//         }) => (\r\n//           <form onSubmit={handleSubmit}>\r\n//             <TextField\r\n//               fullWidth\r\n//               id=\"name\"\r\n//               name=\"name\"\r\n//               label=\"Name\"\r\n//               type=\"text\"\r\n//               value={values.name}\r\n//               onChange={handleChange}\r\n//               onBlur={handleBlur}\r\n//               error={touched.name && Boolean(errors.name)}\r\n//               helperText={touched.name && errors.name}\r\n//             />\r\n\r\n//             <TextField\r\n//               fullWidth\r\n//               id=\"email\"\r\n//               name=\"email\"\r\n//               label=\"Email\"\r\n//               type=\"email\"\r\n//               value={values.email}\r\n//               onChange={handleChange}\r\n//               onBlur={handleBlur}\r\n//               error={touched.email && Boolean(errors.email)}\r\n//               helperText={touched.email && errors.email}\r\n//             />\r\n\r\n//             <TextField\r\n//               fullWidth\r\n//               id=\"password\"\r\n//               name=\"password\"\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               value={values.password}\r\n//               onChange={handleChange}\r\n//               onBlur={handleBlur}\r\n//               error={touched.password && Boolean(errors.password)}\r\n//               helperText={touched.password && errors.password}\r\n//             />\r\n\r\n//             <TextField\r\n//               fullWidth\r\n//               id=\"confirmPassword\"\r\n//               name=\"confirmPassword\"\r\n//               label=\"Confirm Password\"\r\n//               type=\"password\"\r\n//               value={values.password}\r\n//               onChange={handleChange}\r\n//               onBlur={handleBlur}\r\n//               error={touched.password && Boolean(errors.password)}\r\n//               helperText={touched.password && errors.password}\r\n//             />\r\n\r\n//             <Button\r\n//               color=\"primary\"\r\n//               variant=\"contained\"\r\n//               fullWidth\r\n//               type=\"submit\"\r\n//               disabled={\r\n//                 isSubmitting ||\r\n//                 !(\r\n//                   Object.keys(touched).length ===\r\n//                     Object.keys(INITIAL_VALUES).length &&\r\n//                   Object.keys(errors).length === 0\r\n//                 )\r\n//               }\r\n//             >\r\n//               Submit\r\n//             </Button>\r\n//           </form>\r\n//         )}\r\n//       </Formik>\r\n//       <Link to={routes.login}>Jump to login form</Link>\r\n//     </div>\r\n//   );\r\n// };\r\n// export { RegisterView };\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n};\r\n\r\nexport default function LoginView() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница логина</h1>\r\n\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <label style={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\">Войти</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst INITIAL_STATE = {\r\n  items: [],\r\n  query: '',\r\n  error: '',\r\n};\r\n\r\nexport const contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: INITIAL_STATE,\r\n  reducers: {\r\n    getContactsSuccess: (state, action) => {\r\n      state.items = action.payload;\r\n    },\r\n    getContactsFailure: (state, action) => {\r\n      state.error = action.payload.error;\r\n    },\r\n    addContactSuccess: (state, action) => {\r\n      if (state.items.some(c => c.name === action.payload.name)) {\r\n        state.error = 'This contact is already exists in contacts';\r\n      } else {\r\n        state.items.push(action.payload);\r\n      }\r\n    },\r\n    addContactFailure: (state, action) => {\r\n      state.error = action.payload.error;\r\n    },\r\n    deleteContactSuccess: (state, action) => {\r\n      state.items = state.items.filter(c => {\r\n        return c.id !== action.payload;\r\n      });\r\n    },\r\n    updateQuery: (state, action) => {\r\n      state.query = action.payload.toLowerCase();\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  getContactsSuccess,\r\n  getContactsFailure,\r\n  addContactSuccess,\r\n  addContactFailure,\r\n  deleteContactSuccess,\r\n  updateQuery,\r\n} = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n","import axios from 'axios';\r\nimport {\r\n  getContactsSuccess,\r\n  getContactsFailure,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  addContactFailure,\r\n} from './contactsSlice';\r\n\r\nexport const BASE_URL = 'http://localhost:4040';\r\nexport const ACCOUNT_BASE_URL=\"https://connections-api.herokuapp.com\";\r\n\r\nexport function getContacts() {\r\n  return function (dispatch) {\r\n    dispatch({ type: 'GET_CONTACTS_REQUEST' });\r\n    return axios\r\n      .get(`${ACCOUNT_BASE_URL}/contacts`)\r\n      .then(function (response) {\r\n        dispatch(getContactsSuccess(response.data));\r\n      })\r\n      .catch(function (error) {\r\n        dispatch(getContactsFailure({ error: error.toString() }));\r\n      });\r\n  };\r\n}\r\n\r\nexport function addContact(contact) {\r\n  return function (dispatch) {\r\n    return axios\r\n      .post(`${ACCOUNT_BASE_URL}/contacts`, contact)\r\n      .then(function (response) {\r\n        dispatch(addContactSuccess(response.data));\r\n      })\r\n      .catch(function (error) {\r\n        dispatch(addContactFailure({ error: error.toString() }));\r\n      });\r\n  };\r\n}\r\n\r\nexport function deleteContact(id) {\r\n  return function (dispatch) {\r\n    dispatch({ type: 'DELETE_CONTACT_REQUEST' });\r\n    return axios\r\n      .delete(`${ACCOUNT_BASE_URL}/contacts/${id}`)\r\n      .then(function () {\r\n        dispatch(deleteContactSuccess(id));\r\n      })\r\n      .catch(function (error) {\r\n        dispatch({\r\n          type: 'DELETE_CONTACT_FAILURE',\r\n          payload: { error: error.toString() },\r\n        });\r\n      });\r\n  };\r\n}\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const getContactsSelector = state => state.contacts.items;\r\n\r\nexport const getContactsErrorSelector = state => state.contacts.error;\r\n\r\nexport const filter = state => state.filter;\r\n\r\nexport const getQuerySelector = state => state.contacts.query;\r\n\r\nexport const getFilteredContactsSelector = createSelector(\r\n  [getContactsSelector, getQuerySelector],\r\n  (contacts, query) =>\r\n    contacts.filter(item => item.name.toLowerCase().includes(query)),\r\n);\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteContact as deleteContactThunk } from '../redux/thunk';\r\nimport { getContactsSelector } from '../redux/Selectors/contacts-selectors';\r\nimport { getContacts as getContactsThunk } from '../redux/thunk';\r\n\r\nimport styles from './phonebook.module.css';\r\n\r\nfunction Contacts() {\r\n  const dispatch = useDispatch();\r\n\r\n  const items = useSelector(getContactsSelector);\r\n\r\n  useEffect(() => {\r\n    dispatch(getContactsThunk());\r\n  }, [dispatch]);\r\n\r\n  const deleteContact = id => {\r\n    dispatch(deleteContactThunk(id));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.list}>\r\n      {items &&\r\n        items.map(item => (\r\n          <p key={item.id} className={styles.contact}>\r\n            {item.name}: {item.number}\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => deleteContact(item.id)}\r\n              className={styles.btnList}\r\n            >\r\n              delete contact\r\n            </button>\r\n          </p>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","import { useState } from 'react';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport { addContact as addContactThunk } from '../redux/thunk';\r\nimport { getContactsErrorSelector } from '../redux/Selectors/contacts-selectors';\r\nimport styles from './phonebook.module.css';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const error = useSelector(getContactsErrorSelector);\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n\r\n    dispatch(addContactThunk(newContact));\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <>\r\n          <label>\r\n            {' '}\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              className={styles.inputName}\r\n              value={name}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Tel\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              className={styles.inputTel}\r\n              value={number}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\" className={styles.btnForm}>\r\n            Add contact\r\n          </button>\r\n        </>\r\n      </form>\r\n      {error && <p className={styles.error}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import styles from './phonebook.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React, { useState, useCallback } from 'react';\r\nimport { getFilteredContactsSelector } from '../redux/Selectors/contacts-selectors';\r\nimport { updateQuery } from '../redux/contactsSlice';\r\n\r\nfunction Filter() {\r\n  const dispatch = useDispatch();\r\n  const filteredItems = useSelector(getFilteredContactsSelector);\r\n\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleChange = useCallback(e => {\r\n    setQuery(e.target.value);\r\n  }, []);\r\n\r\n  const handleSearch = useCallback(() => {\r\n    dispatch(updateQuery(query));\r\n  }, [query]);\r\n\r\n  return (\r\n    <div>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          type=\"text\"\r\n          value={query}\r\n          onChange={handleChange}\r\n          className={styles.inputFilter}\r\n        />\r\n        <button onClick={handleSearch} className={styles.btnFilter}>\r\n          Найти контакт\r\n        </button>\r\n      </label>\r\n      {query &&\r\n        filteredItems.map(item => (\r\n          <p key={item.id}>\r\n            {item.name}: {item.number}\r\n          </p>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import Contacts from '../components/Contacts';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\n\r\nfunction ContactsView() {\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Contacts />\r\n\r\n      <Filter />\r\n    </>\r\n  );\r\n}\r\nexport { ContactsView };\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = () => (\r\n  <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Главная\r\n    </NavLink>\r\n\r\n    <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Список контактов\r\n    </NavLink>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nconst authSelectors = {\r\n  getIsLoggedIn,\r\n  getUserName,\r\n};\r\n\r\nexport default authSelectors;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUserName);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <span style={styles.name}>Добро пожаловать, {name}</span>\r\n      <button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\r\n        Выйти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Регистрация\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Логин\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <header style={styles.header}>\r\n      <Navigation />\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport  authSelectors  from '../redux/auth/auth-selectors';\r\n\r\n\r\n\r\nexport default function PrivateRoute({\r\n  children,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nexport default function PublicRoute({\r\n  children,\r\n  restricted = false,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  const shouldRedirect = isLoggedIn && restricted;\r\n  return (\r\n    <Route {...routeProps}>\r\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\r\n    </Route>\r\n  );\r\n}\r\n","import { Switch } from 'react-router-dom';\r\nimport { Suspense } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styles from './components/phonebook.module.css';\r\nimport { routes } from './routes';\r\nimport HomeView from './Views/HomeView';\r\nimport RegisterView from './Views/RegisterView';\r\nimport LoginView from './Views/LoginView';\r\nimport { ContactsView } from './Views/ContactsView';\r\nimport AppBar from './components/AppBar';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublikRoute';\r\nimport authOperations from './redux/auth/auth-operations';\r\n\r\n// const HomeView = lazy(() => import('./Views/HomeView'));\r\n// const RegisterView = lazy(() => import('./Views/RegisterView'));\r\n// const LoginView = lazy(() => import('./Views/LoginView'));\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.fetchCurrentUser());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <AppBar />\r\n\r\n      <Switch>\r\n        <Suspense fallback={<p>Загружаем...</p>}>\r\n          <PublicRoute exact path={routes.home} component={HomeView} />\r\n\r\n          <PublicRoute\r\n            exact\r\n            path={routes.register}\r\n            component={RegisterView}\r\n            restricted\r\n          />\r\n\r\n          <PublicRoute\r\n            exact\r\n            path={routes.login}\r\n            component={LoginView}\r\n            redirectTo={routes.contacts}\r\n            restricted\r\n          />\r\n\r\n          <PrivateRoute\r\n            path={routes.contacts}\r\n            component={ContactsView}\r\n            redirectTo={routes.login}\r\n          />\r\n        </Suspense>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\nconst initialState = {\r\n  user: { name: null, email: null },\r\n  token: null,\r\n  isLoggedIn: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [authOperations.register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logIn.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logOut.fulfilled](state, action) {\r\n      state.user = { name: null, email: null };\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contactsSlice';\r\nimport { analyticsLoggerMiddleware } from '../middlewares/analytics-logger';\r\nimport { applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport authReducer from './auth/auth-slice';\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst enhancer = applyMiddleware(thunk, analyticsLoggerMiddleware);\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  enhancers: [enhancer],\r\n});\r\nexport const persistor = persistStore(store);\r\n","\r\nexport const analyticsLoggerMiddleware = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n    console.info('store', store);\r\n\r\n    console.groupEnd(action.type);\r\n  \r\n    return next(action);\r\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\n\nimport 'modern-normalize/modern-normalize.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    </PersistGate>\n\n    </Provider>\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// eslint config prettier"],"sourceRoot":""}